services:
  # ============================================
  # NGINX LOAD BALANCER
  # ============================================
  nginx:
    image: nginx:alpine
    container_name: nginx_lb
    ports:
      - "${NGINX_PORT}:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - app_blue
      - app_green
    networks:
      - app_network
    restart: unless-stopped

  # ============================================
  # BLUE SERVICE (Primary Application)
  # ============================================
  app_blue:
    image: ${BLUE_IMAGE}
    container_name: blue_app
    environment:
      - PORT=${PORT}
      - RELEASE_ID=${RELEASE_ID_BLUE}
      - APP_POOL=${APP_POOL_BLUE}
    ports:
      - "${BLUE_PORT}:${PORT}"
    networks:
      - app_network
    command: >
      sh -c "
      mkdir -p /app &&
      echo '{
        \"name\": \"Blue Service\",
        \"version\": \"${RELEASE_ID_BLUE}\",
        \"pool\": \"${APP_POOL_BLUE}\",
        \"endpoints\": {
          \"/version\": \"GET - returns service info\",
          \"/healthz\": \"GET - health check\",
          \"/chaos/start\": \"POST - simulate downtime\", 
          \"/chaos/stop\": \"POST - stop chaos\"
        }
      }' > /app/data.json &&
      echo '
      const http = require(\"http\");
      const fs = require(\"fs\");
      const server = http.createServer((req, res) => {
        res.setHeader(\"X-App-Pool\", \"${APP_POOL_BLUE}\");
        res.setHeader(\"X-Release-Id\", \"${RELEASE_ID_BLUE}\");
        res.setHeader(\"Content-Type\", \"application/json\");
        res.setHeader(\"Access-Control-Allow-Origin\", \"*\");
        if (req.url === \"/data.json\" || req.url === \"/version\" || req.url === \"/\") {
          const data = fs.readFileSync(\"/app/data.json\", \"utf8\");
          res.end(data);
        } else if (req.url === \"/healthz\") {
          res.end(JSON.stringify({status: \"healthy\"}));
        } else {
          res.statusCode = 404;
          res.end(JSON.stringify({error: \"Not found\"}));
        }
      });
      server.listen(3000, () => {
        console.log(\"Blue Service running on port 3000 with headers\");
      });
      ' > /app/server.js &&
      node /app/server.js
      "
    restart: unless-stopped

  # ============================================
  # GREEN SERVICE (Backup Application)
  # ============================================
  app_green:
    image: ${GREEN_IMAGE}
    container_name: green_app
    environment:
      - PORT=${PORT}
      - RELEASE_ID=${RELEASE_ID_GREEN}
      - APP_POOL=${APP_POOL_GREEN}
    ports:
      - "${GREEN_PORT}:${PORT}"
    networks:
      - app_network
    command: >
      sh -c "
      mkdir -p /app &&
      echo '{
        \"name\": \"Green Service\",
        \"version\": \"${RELEASE_ID_GREEN}\",
        \"pool\": \"${APP_POOL_GREEN}\",
        \"endpoints\": {
          \"/version\": \"GET - returns service info\",
          \"/healthz\": \"GET - health check\",
          \"/chaos/start\": \"POST - simulate downtime\",
          \"/chaos/stop\": \"POST - stop chaos\"
        }
      }' > /app/data.json &&
      echo '
      const http = require(\"http\");
      const fs = require(\"fs\");
      const server = http.createServer((req, res) => {
        res.setHeader(\"X-App-Pool\", \"${APP_POOL_GREEN}\");
        res.setHeader(\"X-Release-Id\", \"${RELEASE_ID_GREEN}\");
        res.setHeader(\"Content-Type\", \"application/json\");
        res.setHeader(\"Access-Control-Allow-Origin\", \"*\");
        if (req.url === \"/data.json\" || req.url === \"/version\" || req.url === \"/\") {
          const data = fs.readFileSync(\"/app/data.json\", \"utf8\");
          res.end(data);
        } else if (req.url === \"/healthz\") {
          res.end(JSON.stringify({status: \"healthy\"}));
        } else {
          res.statusCode = 404;
          res.end(JSON.stringify({error: \"Not found\"}));
        }
      });
      server.listen(3000, () => {
        console.log(\"Green Service running on port 3000 with headers\");
      });
      ' > /app/server.js &&
      node /app/server.js
      "
    restart: unless-stopped

# ============================================
# NETWORK CONFIGURATION
# ============================================
networks:
  app_network:
    driver: bridge
